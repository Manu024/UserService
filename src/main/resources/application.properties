spring.application.name=AuthorizationService

# Server configuration
server.port=4141

# Specifies the action to be taken for the database schema at startup.
# Possible values:
# - none: No action will be taken.
# - validate: Validate the schema, make no changes to the database.
# - update: Update the database schema if necessary, without dropping any data.
# - create: Create the schema, destroying previous data.
# - create-drop: Create the schema, then drop it at shutdown.
spring.jpa.hibernate.ddl-auto=update

# Defines the JDBC URL for connecting to the MySQL database.
# Replace 'localhost' with the database server address if it's hosted elsewhere.
# The '3306' is the default port for MySQL, and 'authservice' is the database name.
spring.datasource.url=${SPRING_DB_URL}

# Username for connecting to the MySQL database.
spring.datasource.username=${SPRING_DB_USERNAME}

# Password for the above username to access the MySQL database.
spring.datasource.password=${SPRING_DB_PWD}

# Specifies the fully qualified class name of the JDBC driver for MySQL.
# The 'com.mysql.cj.jdbc.Driver' is the official MySQL driver for Java.
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Enables logging of SQL statements executed by Hibernate.
# Set to 'true' to see SQL queries in the console output, which is helpful for debugging.
spring.jpa.show-sql= true


# Logging configuration
logging.level.org.springframework.security=debug

## Spring Security User configuration
#commented out the default user configuration, instead we will use the code level config from the securityconfig.java file
#spring.security.user.name=user
#spring.security.user.password=password
#
## OIDC (OpenID Connect) Client Registration Configuration
## OIDC Client ID
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-id=oidc-client
#
## OIDC Client Secret (noop means no password encoding)
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-secret={noop}secret
#
## Client Authentication Methods
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-authentication-methods[0]=client_secret_basic
#
## Authorization Grant Types
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.authorization-grant-types[0]=authorization_code
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.authorization-grant-types[1]=refresh_token
#
## Redirect URIs
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.redirect-uris[0]=http://127.0.0.1:8080/login/oauth2/code/oidc-client
#
## Post Logout Redirect URIs
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.post-logout-redirect-uris[0]=http://127.0.0.1:8080/
#
## Scopes requested by the client
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.scopes[0]=openid
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.scopes[1]=profile
#
## Require Authorization Consent from the user
#spring.security.oauth2.authorizationserver.client.oidc-client.require-authorization-consent=true

